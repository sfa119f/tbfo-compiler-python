S -> IMPORT | DEF | CLASS | MAIN
IMPORT -> FROM import namamethod AS IMPORT | import namamethod AS IMPORT | import namamethod IMPORT | FROM import namamethod AS DEF | import namamethod AS DEF | import namamethod DEF | DEF
FROM -> from namafile
AS -> as kependekan
DEF -> DEF_FUNGSI | DEF_PROSEDUR
DEF_PROSEDUR -> def namaprosedur ( PARAMETER ) : ISI_PROSEDUR DEF | def namaprosedur ( PARAMETER ) : ISI_PROSEDUR CLASS | def namaprosedur ( PARAMETER ) : ISI_PROSEDUR MAIN
DEF_FUNGSI -> def namafungsi ( PARAMETER ) - > TYPE : ISI_FUNGSI DEF | def namafungsi ( PARAMETER ) - > TYPE : ISI_FUNGSI CLASS | def namafungsi ( PARAMETER ) - > TYPE : ISI_FUNGSI MAIN
PARAMETER -> TYPE VAR_NAME , PARAMETER | TYPE VAR_NAME
ISI_PROSEDUR -> MAIN
ISI_FUNGSI -> MAIN ISI_FUNGSI RETURN | MAIN RETURN | ISI_FUNGSI RETURN
CLASS -> class namaclass : DEFCLASS CLASS | class namaclass : DEFCLASS MAIN
DEFCLASS -> def namafungsi ( PARAMETER ) : ISI_FUNGSI DEF | def namafungsi ( PARAMETER ) : ISI_FUNGSI
MAIN -> ALGORITMA ALGORITMA | ALGORITMA
ALGORITMA -> LOGIC_STATEMENT | LOOP_STATEMENT | NORMAL_STATEMENT
LOGIC_STATEMENT -> IF_STATEMENT | IF_ELIF_STATEMENT | IF_ELSE_STATEMENT
IF_STATEMENT -> if ( KONDISI ) : ALGORITMA
IF_ELIF_STATEMENT -> IF_STATEMENT ELIF_STATEMENT | IF_STATEMENT ELIF_STATEMENT ELSE_STATEMENT
ELIF_STATEMENT -> elif ( KONDISI ) : ALGORITMA ELIF_STATEMENT | elif ( KONDISI ) : ALGORITMA
ELSE_STATEMENT -> else : ALGORITMA
IF_ELSE_STATEMENT -> IF_STATEMENT ELSE_STATEMENT
KONDISI -> namafungsi ( PARAMETER ) | VAR_NAME ARI_OP VAR_NAME | VAR_NAME ARI_OP NUMBER | NUMBER ARI_OP NUMBER | NUMBER ARI_OP VAR_NAME | VAR_NAME LOG_OP LOGIC_VAR | VAR_NAME LOG_OP VAR_NAME | LOGIC_VAR LOG_OP VAR_NAME | LOGIC_VAR LOG_OP LOGIC_VAR | VAR_NAME LOG_OP STRING | STRING LOG_OP VAR_NAME
ARI_OP -> > | < | <= | >= | == | !=
LOG_OP -> and | or | == | !=
NUMBER -> 0 NUMBER | 1 NUMBER | 2 NUMBER | 3 NUMBER | 4 NUMBER | 5 NUMBER | 6 NUMBER | 7 NUMBER | 8 NUMBER | 9 NUMBER | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | NUMBER . NUMABISKOMA
NUMABISKOMA ->  0 NUMBER | 1 NUMBER | 2 NUMBER | 3 NUMBER | 4 NUMBER | 5 NUMBER | 6 NUMBER | 7 NUMBER | 8 NUMBER | 9 NUMBER | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
STRING -> "KEYBOARD" | 'KEYBOARD'
KEYBOARD -> WORD KEYBOARD | SYMBOL KEYBOARD | NUMBER KEYBOARD
WORD -> A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z | a | b | c | d | e | f | g | h | i | j | k | l | m | n | o | p | q | r | s | t | u | v | w | x | y | z | A WORD | B WORD | C WORD | D WORD | E WORD | F WORD | G WORD | H WORD | I WORD | J WORD | K WORD | L WORD | M WORD | N WORD | O WORD | P WORD | Q WORD | R WORD | S WORD | T WORD | U WORD | V WORD | W WORD | X WORD | Y WORD | Z WORD | a WORD | b WORD | c WORD | d WORD | e WORD | f WORD | g WORD | h WORD | i WORD | j WORD | k WORD | l WORD | m WORD | n WORD | o WORD | p WORD | q WORD | r WORD | s WORD | t WORD | u WORD | v WORD | w WORD | x WORD | y WORD | z WORD
SYMBOL -> ! | @ | # | $ | % | ^ | & | * | ( | ) | - | _ | + | = | { | } | [ | ] | \ | : | ; | ' | " | < | > | , | . | / | ? |   | ! SYMBOL | @ SYMBOL | # SYMBOL | $ SYMBOL | % SYMBOL | ^ SYMBOL | & SYMBOL | * SYMBOL | ( SYMBOL | ) SYMBOL | - SYMBOL | _ SYMBOL | + SYMBOL | = SYMBOL | { SYMBOL | } SYMBOL | [ SYMBOL | ] SYMBOL | \ SYMBOL | : SYMBOL | ; SYMBOL | ' SYMBOL | " SYMBOL | < SYMBOL | > SYMBOL | , SYMBOL | . SYMBOL | / SYMBOL | ? SYMBOL |   SYMBOL
LOGIC_VAR -> true | false
LOOP_STATEMENT -> FOR_STATEMENT | WHILE_STATEMENT
FOR_STATEMENT -> for VAR_NAME in ARRAY_NAME : ALGORITMA
WHILE_STATEMENT -> while ( KONDISI ) : ALGORITMA
NORMAL_STATEMENT -> VAR_NAME = NUMBER | VAR_NAME = LOGIC_VAR | VAR_NAME = INPUT | VAR_NAME = STRING | PRINT
INPUT -> input ( STRING ) | input (  )
PRINT -> print ( OBJECT )
OBJECT -> OBJECT , OBJECT | STRING | VAR_NAME


